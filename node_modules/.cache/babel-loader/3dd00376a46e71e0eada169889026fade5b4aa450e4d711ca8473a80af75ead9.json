{"ast":null,"code":"/** @format */\n\nconst GEO_API_URL = \"https://wft-geo-db.p.rapidapi.com/v1/geo\";\nconst WEATHER_API_URL = \"https://api.openweathermap.org/data/2.5\";\nconst WEATHER_API_KEY = \"e20f7d114a11a2d3a537edb503a94d4a\";\nconst GEO_API_OPTIONS = {\n  method: \"GET\",\n  headers: {\n    \"X-RapidAPI-Key\": \"4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917\",\n    \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\"\n  }\n};\nexport async function fetchWeatherData(lat, lon) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`), fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`)]);\n    const weatherResponse = await weatherPromise.json();\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function fetchCities(input) {\n  try {\n    const response = await fetch(`${GEO_API_URL}/cities?minPopulation=10000&namePrefix=${input}`, GEO_API_OPTIONS);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n}","map":{"version":3,"names":["GEO_API_URL","WEATHER_API_URL","WEATHER_API_KEY","GEO_API_OPTIONS","method","headers","fetchWeatherData","lat","lon","weatherPromise","forcastPromise","Promise","all","fetch","weatherResponse","json","forcastResponse","error","console","log","fetchCities","input","response","data"],"sources":["/home/santosh-deepika/santosh-weather-app-react/the-weather-forecasting/src/api/OpenWeatherService.js"],"sourcesContent":["/** @format */\n\nconst GEO_API_URL = \"https://wft-geo-db.p.rapidapi.com/v1/geo\";\n\nconst WEATHER_API_URL = \"https://api.openweathermap.org/data/2.5\";\nconst WEATHER_API_KEY = \"e20f7d114a11a2d3a537edb503a94d4a\";\n\nconst GEO_API_OPTIONS = {\n\tmethod: \"GET\",\n\theaders: {\n\t\t\"X-RapidAPI-Key\": \"4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917\",\n\t\t\"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\",\n\t},\n};\n\nexport async function fetchWeatherData(lat, lon) {\n\ttry {\n\t\tlet [weatherPromise, forcastPromise] = await Promise.all([\n\t\t\tfetch(\n\t\t\t\t`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n\t\t\t),\n\t\t\tfetch(\n\t\t\t\t`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n\t\t\t),\n\t\t]);\n\n\t\tconst weatherResponse = await weatherPromise.json();\n\t\tconst forcastResponse = await forcastPromise.json();\n\t\treturn [weatherResponse, forcastResponse];\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n}\n\nexport async function fetchCities(input) {\n\ttry {\n\t\tconst response = await fetch(\n\t\t\t`${GEO_API_URL}/cities?minPopulation=10000&namePrefix=${input}`,\n\t\t\tGEO_API_OPTIONS\n\t\t);\n\n\t\tconst data = await response.json();\n\t\treturn data;\n\t} catch (error) {\n\t\tconsole.log(error);\n\t\treturn;\n\t}\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG,0CAA0C;AAE9D,MAAMC,eAAe,GAAG,yCAAyC;AACjE,MAAMC,eAAe,GAAG,kCAAkC;AAE1D,MAAMC,eAAe,GAAG;EACvBC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;IACR,gBAAgB,EAAE,oDAAoD;IACtE,iBAAiB,EAAE;EACpB;AACD,CAAC;AAED,OAAO,eAAeC,gBAAgBA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAChD,IAAI;IACH,IAAI,CAACC,cAAc,EAAEC,cAAc,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACxDC,KAAK,CACH,GAAEZ,eAAgB,gBAAeM,GAAI,QAAOC,GAAI,UAASN,eAAgB,eAC3E,CAAC,EACDW,KAAK,CACH,GAAEZ,eAAgB,iBAAgBM,GAAI,QAAOC,GAAI,UAASN,eAAgB,eAC5E,CAAC,CACD,CAAC;IAEF,MAAMY,eAAe,GAAG,MAAML,cAAc,CAACM,IAAI,CAAC,CAAC;IACnD,MAAMC,eAAe,GAAG,MAAMN,cAAc,CAACK,IAAI,CAAC,CAAC;IACnD,OAAO,CAACD,eAAe,EAAEE,eAAe,CAAC;EAC1C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACnB;AACD;AAEA,OAAO,eAAeG,WAAWA,CAACC,KAAK,EAAE;EACxC,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAC1B,GAAEb,WAAY,0CAAyCqB,KAAM,EAAC,EAC/DlB,eACD,CAAC;IAED,MAAMoB,IAAI,GAAG,MAAMD,QAAQ,CAACP,IAAI,CAAC,CAAC;IAClC,OAAOQ,IAAI;EACZ,CAAC,CAAC,OAAON,KAAK,EAAE;IACfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB;EACD;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}